/**
 * COMP2911 VanRentalSystem Assignment 1
 * 
 * Date: April 2017
 * Author: Brian Lam
 */

import java.io.*;
import java.util.*;
import java.util.Map.Entry;
import java.time.*;
//import java.time.format.DateTimeFormatter;


/**
 * Reads from the input stream and parses commands as per format defined in the assignment spec.
 * The formatted commands will be issued to the booking system for use.
 */
public class VanRentalSystem {
	
	// VanRentalSystem - Read input line-by-line
	//				   - Creates a van object + put them into an ArrayList of vans (will be in order of declaration)
	// BookingSystem   - Creates a VanBooking object (identifier: bookingID)
	//				   - BOOKING: Looks through VanRentalSystem ArrayList of vans to find suitable vans
	//				   -         Checks 
	// VanBooking	   - Facilitates performing date/time availability checks for vans
	//
	
	// VanRentalSystem - Creates a depot object + add them to a list of depots (will be in order)
	//				   - Creates a van object + put them into a list of vans within depot object (will be in order)
	// BookingSystem   - Creates a Booking (identifier: ID)
	//				   - Peeks at the list of depots @RentalSystem
	//				   - Peeks at list of vans @Depot
	//				   - 
	//				   - Assigns van object to booking
	// Booking		   - 
	
	// OUTPUT FORMAT
	// Booking [id] [depot1] [van, van, van]; [depot2] [van]	// BookingSys - Stores list of depot + van declarations
	//																		  - Creates booking object (identifier: ID).
	//																// Object - Stores list of depots + vans assigned to booking (identifiers)
	// Change [id] [depot1] [van]; [depot2] [van]				// BookingSys - 
	// Cancel [id]												// Booking
	// Booking rejected											// Booking
	// [PrintDepot] [van] [startDateTime] [endDateTime]
	// [PrintDepot] [van] [startDateTime] [endDateTime]
	
	// List of depots declared in order
	private ArrayList<String> depotsDeclared;
	// List of vans declared in order
	private ArrayList<String> vansDeclared;
	
	/**
	 * Parses input line-by-line and issues commands.
	 * @param args
	 */
	public static void main(String[] args) {
		Scanner sc = null;
		try {
			sc = new Scanner(new FileReader(args[0])); 
			while (sc.hasNextLine()) { 
				String line = sc.nextLine();
				String[] input = line.split("\\s+");
				
				// Parses depot / van declaration string
				if (input[0].equals("Location")) {
					// Location <depot> <vanName> <vanType> <comment>
					String depotName = input[1];
					String vanName = input[2];
					String vanType = input[3];
					
					
					
					
				// Skip comments and empty lines	
				} else if (input[0].equals("#") || input[0].isEmpty()) {
					// Location <depot> <vanName> <vanType> <comment>
					
					continue;
				} else if (input[0].equals("Request")) {
					System.out.println("------------------------------------------------ BOOKING REQUEST");
					// Make a booking
				} else if (input[0].equals("Change")) {
					System.out.println("------------------------------------------------ BOOKING CHANGE");
					// Make a change
				} else if (input[0].equals("Cancel")) {
					System.out.println("------------------------------------------------ BOOKING CANCELLATION");
					// Cancel a booking
				} else if (input[0].equals("Print")) {
					System.out.println("------------------------------------------------ PRINT THINGS");
					// Print bookings of all vehicles at specified depot in order of vehicle declarations
				}
				
				// DATE TIME PRINT FORMAT
				// hour     HH:MM   (24:00 system)
				// month    MMM     (JAN, FEB, MAR)
				// day/date DD      (1-31)

				System.out.println(line);	// prints the line
			}
		}

		// Doing error testing. Handling exceptions.
		catch (FileNotFoundException e) {

		}
	
		// Everything is done, closing the file
		finally {
			if (sc != null) sc.close();
		}
	}
}