/**
 * COMP2911 FreightSystem Assignment 2
 * Date: April 2017
 * Author: Brian Lam
 */

import java.util.*;

// DESIGN

// Implement Djikstra's
// Do a run-through of base case f(n) = g(n)
// Implement Heuristic functions in Strategy Design
// Do a run-through of uniform-cost + heuristic cost f(n) = g(n) + h(n)

public class AStar {
	
	Comparator<Integer> comparator;
	private PriorityQueue<Integer> pq;
	private ArrayList<Integer> prev;
	private ArrayList<Integer> dist;

	public AStar(int numCity) {
		this.comparator = new WeightCompare();
		this.pq = new PriorityQueue<Integer>(numCity, comparator);
		this.prev = new ArrayList<Integer>();
		this.dist = new ArrayList<Integer>();
	}
	
	public void addToPQ(int numCity) {
		int prevStart = -1;
		for (int i = 0; i < numCity; i++) {
			prev.add(prevStart);
			pq.add(i);
		}
	}
	
	public void setDist(int numCity) {
		int distStart = 0;
		int distVal = 10000;
		for (int i = 0; i < numCity; i++) {
			dist.add(distVal);
		}
		// set start distance = 0
		dist.set(FreightSystem.getCityID("Sydney"), distStart);
	}
	
	// Currently, it is sorted based on natural order: vertex ID
	// It needs to be sorted based on vertex ID's DISTANCE
	
	public void aStar(int start, int numCity) {
		System.out.println(pq.size());						// TEST -- REMOVE
		while(pq.size() != 0) {
			int v = pq.poll();
			System.out.println("############");				// TEST -- REMOVE
			System.out.println("VERTEX = " + FreightSystem.getCityStr(v));			// TEST -- REMOVE
			for (int w = 0; w < numCity; w++) {
				System.out.println("PATH TO = " + FreightSystem.getCityStr(w));			// TEST -- REMOVE
				int len = FreightSystem.graph.matrix[v][w];
				System.out.println("LENGTH = " + len);		// TEST -- REMOVE
				if (len < 0) {
					System.out.println("NO EDGE -> SKIP");
					continue;
				}
				System.out.println("EDGE EXISTS -> CHECKING IF IT IS SHORTER THAN CURRENT SHORTEST");
				if (dist.get(v) + len < dist.get(w)) {
					System.out.println("NEW PATH FOUND -> EDGE RELAXATION");
					prev.set(w, v);
					dist.set(w, (dist.get(v) + len));
				}
			}
			System.out.println("----------------------");
			System.out.println("PQ SIZE = " + pq.size());
		}
		System.out.println("FINAL PREV SIZE = " + prev.size());
		System.out.println("FINAL PREV = " + prev);
		System.out.println("FINAL DIST SIZE = " + dist.size());
		System.out.println("FINAL DIST = " + dist);
	}
}
