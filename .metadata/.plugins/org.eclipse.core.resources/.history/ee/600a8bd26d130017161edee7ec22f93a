import java.util.ArrayList;

/**
 * An implementation of a set E using an ArrayListSet
 * We can do it using a LinkedListSet
 * Whatever we do, we want to compare and manipulate sets of the same type.
 * Delegates the set methods to the ArrayListSet etc.
 * @author brianlam
 * @invariant all elements of the ArrayList are distinct
 * @param <E> uses a generic type so any object can be declared
 */

public class ArrayListSet<E> implements Set<E>, Cloneable {
	private ArrayList<E> setElements;
	
	// initialise our new set as an empty arrayList
	public ArrayListSet() {
		setElements = new ArrayList<E>();
	}
	
	public boolean contains(E e) {
		return setElements.contains(e);
	}
	
	// Add element from arrayList
	public void add(E e) {
		setElements.add(e);
	}
	// Remove element from arrayList
	public void remove(E e) {
		setElements.remove(e);
	}
	
	public union(Set<E> secondSet) {
		
	}
	
	public intersection(Set<E> secondSet){
		
	}
	
	public boolean contains(Object e) {
		return setElements.contains(e);
	}
	
	public boolean equals(Object o) {
		if (this == o) return true;	// if its an object, ret TRUE
		if (o == null) return false; // if not an object, ret FALSE
		// if (getClass() != o.getClass()) return false;
		if (!(o instanceof Set)) return false; // If not instanceof set at runtime
		Set<?> other = (Set<?>) o; // Turn it back to a set (wildcard ?)
		if (size() != other.size()) return false; 
		
		return containsAll(other);
	}
}
