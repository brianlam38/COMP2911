/**
 * COMP2911 VanRentalSystem Assignment 1
 * 
 * Date: April 2017
 * Author: Brian Lam
 */

import java.io.*;
import java.util.*;
import java.util.Map.Entry;
import java.time.*;
//import java.time.format.DateTimeFormatter;


/**
 * Reads from the input stream and parses commands as per format defined in the assignment spec.
 * The formatted commands will be issued to the booking system for use.
 */
public class VanRentalSystem {
	
	// VanRentalSystem - Read input line-by-line + Parses information into VanSystem
	//				   - #### Methods:
	//				   - Creates a HashMap of <Key DepotName, Object CamperVan>
	//				   - Creates a van object
	//				   - Add van object to VanSystem's ArrayList<CamperVan> (will be in order of declaration)
	//				   - #### Stores information about:
	//				   - HashMap<key DepotName, object CamperVan>	(mainly for "Printing" functionality
	
	// VanSystem	   - ENTRY POINT FOR VANS + BOOKINGS
	//				   - #### Methods:
	//				   - Creates a VanBooking object (identifier: bookingID)
	//				   - BOOKING: Looks through its ArrayList of vans.
	//				   - 		  For each CamperVan, check if it is available @specified booking time
	//				   -		      Compare REQUESTED TIME / EXISTING TIME in each VanBooking object in Van's List
	//				   -		  If success, add VanBooking object to CamperVan's ArrayList<VanBooking>
	//				   -		  Else check next CamperVan.
	//				   - CHANGES:
	//				   - CANCELLATIONS: Look through its ArrayList of vans.
	//				   -				For each CamperVan
	//				   -					If VanBooking.ID = Cancellation.ID
	//				   -					Delete VanBooking object from ArrayList
	
	// VanBooking      - VANBOOKING OBJECT (identifier: BookingID)
	//				   - #### Methods:
	//				   - Facilitates performing date/time availability checks for CamperVans
	//				   - Facilitates performing auto/manual checks for CamperVans
	//				   - #### Stores information about:
	//				   - Current VanBooking's LocalDateTime start, LocalDateTime end
	
	// CamperVan	   - CAMPERVAN OBJECT (identifier: vanName)
	// 				   - #### Stores information about:
	//				   - DepotName, VanName, VanType, ArrayList<VanBookings
	
	// OUTPUT FORMAT
	// Booking [id] [depot1] [van, van, van]; [depot2] [van]	// In order of ID->
	// Change [id] [depot1] [van]; [depot2] [van] 
	// Cancel [id]												// 
	//
	// Booking rejected											// VanSystem -> Booking check fails -> print "Booking rejected"
	// [PrintDepot] [van] [startDateTime] [endDateTime]			// VanRentalSystem -> HashMap<DepotName> -> Iterate through entry
	
	// List of depots declared in order
	private ArrayList<String> depotsDeclared;
	// List of vans declared in order
	private ArrayList<String> vansDeclared;
	
	/**
	 * Parses input line-by-line and issues commands.
	 * @param args
	 */
	public static void main(String[] args) {
		Scanner sc = null;
		try {
			sc = new Scanner(new FileReader(args[0])); 
			while (sc.hasNextLine()) { 
				String line = sc.nextLine();
				String[] input = line.split("\\s+");
				
				// Parses depot / van declaration string
				if (input[0].equals("Location")) {
					// Location <depot> <vanName> <vanType> <comment>
					String depotName = input[1];
					String vanName = input[2];
					String vanType = input[3];
					
					
					
					
				// Skip comments and empty lines	
				} else if (input[0].equals("#") || input[0].isEmpty()) {
					// Location <depot> <vanName> <vanType> <comment>
					
					continue;
				} else if (input[0].equals("Request")) {
					System.out.println("------------------------------------------------ BOOKING REQUEST");
					// Make a booking
				} else if (input[0].equals("Change")) {
					System.out.println("------------------------------------------------ BOOKING CHANGE");
					// Make a change
				} else if (input[0].equals("Cancel")) {
					System.out.println("------------------------------------------------ BOOKING CANCELLATION");
					// Cancel a booking
				} else if (input[0].equals("Print")) {
					System.out.println("------------------------------------------------ PRINT THINGS");
					// Print bookings of all vehicles at specified depot in order of vehicle declarations
				}
				
				// DATE TIME PRINT FORMAT
				// hour     HH:MM   (24:00 system)
				// month    MMM     (JAN, FEB, MAR)
				// day/date DD      (1-31)

				System.out.println(line);	// prints the line
			}
		}

		// Doing error testing. Handling exceptions.
		catch (FileNotFoundException e) {

		}
	
		// Everything is done, closing the file
		finally {
			if (sc != null) sc.close();
		}
	}
}