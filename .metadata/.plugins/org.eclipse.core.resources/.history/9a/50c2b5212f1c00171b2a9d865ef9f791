import java.util.*;
import java.time.LocalDateTime;

/**
 * Allows other classes to perform checks to see if van is available in the requested time period
 *
 *
 */
public class VanBooking {
	
	// Constructor
	public VanBooking {
		
	}

	/**
	 * Converts month string to integer form.
	 */
	private static int monthToInt(String month) {
		String[] months = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
		for (int i = 0; i < 12; i++) {
			if (month.equals(months[i])) {
				return i+1;
			}
		}
		return 0;
	}
	
	/**
	 * Creates a start date and time object
	 * @return
	 */
	public static LocalDateTime setStart(String hourStr, String monthStr, String dateStr) {
		int hour = Integer.parseInt(hourStr);
		int month = monthToInt(monthStr);											// Convert str format to int
		int date = Integer.parseInt(dateStr);
		LocalDateTime startDateTime = LocalDateTime.of(2017, month, date, hour, 0, 0, 0);	// Create date time obj
		// DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm MMM dd");
		// String dateTimeStr = startDateTime.format(formatter);							// Convert date time to str w/ custom format
		return startDateTime;
	}

	/**
	 * Creates an end date and time object
	 * @return
	 */
	public static LocalDateTime setEnd(String hourStr, String monthStr, String dateStr) {
		int hour = Integer.parseInt(hourStr);
		int month = monthToInt(monthStr);										// Convert str format to int
		int date = Integer.parseInt(dateStr);
		LocalDateTime endDateTime = LocalDateTime.of(2017, month, date, hour, 0, 0, 0);	// Create date time obj
		// formatter = DateTimeFormatter.ofPattern("HH:mm MMM dd");
		// String dateTimeStr = endDateTime.format(formatter);							// Convert date time to str w/ custom format
		return endDateTime;
	}
	
	/**
	 * Compares start and end dates of two different
	 * periods to see if they overlap.
	 */
	public boolean dateOverlap(LocalDateTime start1, LocalDateTime start2, LocalDateTime end1, LocalDateTime end2) {
		LocalDateTime maxStart;
		if (start1.compareTo(start2) == 1) {
			maxStart = start1;
		} else {
			maxStart = start2;
		}
		LocalDateTime minEnd;
		if (end1.compareTo(end2) == -1) {
			minEnd = end1;
		} else {
			minEnd = end2;
		}
		if (minEnd.compareTo(maxStart) == 1) {
			return true;
		} else {
			return false;
		}
	}
	
	
	
}
