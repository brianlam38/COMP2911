import java.io.*;
import java.util.*;
import java.time.*;

/**
 * This class represents the entry point
 * for vans and van bookings.
 * 
 * It handles all booking requests, changes
 * and cancellations. It also stores info
 * for output printing purposes.
 *
 */
public class VanSystem {

	ArrayList<CamperVan> realVanList;		// True vanList
	ArrayList<CamperVan> vanListPrint;		// purely for output printing purposes (Cleans every instance of a booking, change, cancellation)
	int requestID;							// purely for output printing purposes (Cleans every instance of a booking, change, cancellation)
	
	public VanSystem() {
		this.realVanList = new ArrayList<CamperVan>();
		this.vanListPrint = new ArrayList<CamperVan>();
	}
	
	/**
	 *  Makes a van booking instance.
	 *  
	 *  Performs the following checks:
	 *  1. Correct van type
	 *  2. No overlapping bookings
	 *  
	 *  If any checks are failed, "Booking rejected" is printed.
	 */
	public void makeVanBooking(String type, int bookingID, LocalDateTime startDT, LocalDateTime endDT) {
		VanBooking newBooking = new VanBooking(type, bookingID, startDT, endDT);
		int arraySize = realVanList.size();
		
		// Scan through CamperVan list
		for (int i = 0; i < arraySize; i++) {
			CamperVan van = realVanList.get(i);
			//CamperVan fakeVan = vanListPrint.get(i); // FAKE VAN #####
			if (!(van.type.equals(type))) continue;
			int numBookings = van.bookings.size();
			
			// Scan through all Bookings per CamperVan
			for (int j = 0; j < numBookings; j++) {		
				VanBooking origBooking = van.bookings.get(j);
				// No existing bookings for CamperVan
				if (van.bookings.isEmpty()) {
					van.bookings.add(newBooking);
					//fakeVan.bookings.add(newBooking); // FAKE VAN #####
				// Date overlaps, print reject
				} else if (dateOverlap(origBooking.start, origBooking.end, newBooking.start, newBooking.end) == true) {
					System.out.println("Booking rejected");
				// Valid booking, add to CamperVan
				} else {
					van.bookings.add(newBooking);
					//fakeVan.bookings.add(newBooking); // FAKE VAN #####
				}
			}
		}
		// If error occurs, print "Booking rejected"
	}
	
	public void deleteVanBooking(int cancelID) {
		int arraySize = realVanList.size();
		
		// Scan through CamperVan list
		for (int i = 0; i < arraySize; i++) {
			CamperVan van = realVanList.get(i);
			int numBookings = van.bookings.size();
			
			// Scan through all Bookings per CamperVan
			for (int j = 0; j < numBookings; j++) {
				VanBooking origBooking = van.bookings.get(i);
				// If Booking = CancelID, remove object from Booking list
				if (origBooking.ID == cancelID) {
					van.bookings.remove(i);
				}
			}
		}
	}
	
	public void copyVanBooking(String type, int bookingID, LocalDateTime startDT, LocalDateTime endDT) {
		VanBooking newBooking = new VanBooking(type, bookingID, startDT, endDT);
		int arraySize = realVanList.size();
		
		// Scan through CamperVan list
		for (int i = 0; i < arraySize; i++) {
			CamperVan van = vanListPrint.get(i);
			if (!(van.type.equals(type))) continue;
			int numBookings = van.bookings.size();
			
			// Scan through all Bookings per CamperVan
			for (int j = 0; j < numBookings; j++) {		
				VanBooking origBooking = van.bookings.get(j);
				// No existing bookings for CamperVan
				if (van.bookings.isEmpty()) {
					van.bookings.add(newBooking);
					//fakeVan.bookings.add(newBooking); // FAKE VAN #####
				// Date overlaps, print reject
				} else if (dateOverlap(origBooking.start, origBooking.end, newBooking.start, newBooking.end) == true) {
					System.out.println("Booking rejected");
				// Valid booking, add to CamperVan
				} else {
					van.bookings.add(newBooking);
					//fakeVan.bookings.add(newBooking); // FAKE VAN #####
				}
			}
		}
		// If error occurs, print "Booking rejected"
	}
	
	/**
	 * Compares start and end dates of two different
	 * periods to see if they overlap.
	 */
	public boolean dateOverlap(LocalDateTime origStart, LocalDateTime origEnd, LocalDateTime newStart, LocalDateTime newEnd) {
		LocalDateTime maxStart;
		if (origStart.compareTo(newStart) == 1) {	// Grab max(origStart, newStart)
			maxStart = origStart;
		} else {
			maxStart = newStart;
		}
		LocalDateTime minEnd;					// Grab min(origEnd, newEnd)
		if (origEnd.compareTo(newEnd) == -1) {
			minEnd = origEnd;
		} else {
			minEnd = newEnd;
		}
		if (minEnd.compareTo(maxStart) == 1) {	// if minEnd > maxStart, date overlaps
			return true;
		} else {
			return false;
		}
	}
	

}
